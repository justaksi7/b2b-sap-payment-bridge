asyncapi: 3.0.0
info:
  title: Payment Event Processing API
  version: 1.0.0
  description: |
    SAP Payment Bridge Events Documentation

defaultContentType: application/json

servers:
  POST-SQS:
    host: sqs.eu-central-1.amazonaws.com
    protocol: aws-sqs
    pathname: /123456789012/POST-SQS
    description: AWS SQS Queue        for storing Payment POST Requests

  Worker-SQS:
    host: sqs.eu-central-1.amazonaws.com
    protocol: aws-sqs
    pathname: /123456789012/WORKER-SQS
    description: AWS SQS Queue for storing PaymentCreated Events

  Webhook-SQS:
    host: sqs.eu-central-1.amazonaws.com
    protocol: aws-sqs
    pathname: /123456789012/WEBHOOK-SQS
    description: AWS SQS Queue for storing PaymentCreated Events
  Logger-SQS:
    host: sqs.eu-central-1.amazonaws.com
    protocol: aws-sqs
    pathname: /123456789012/Logger-SQS
    description: AWS SQS Queue for storing Logs  
  Request Dispatcher:
    host: lambda.eu-central-1.amazonaws.com/2015-03-31/functions/RequestDispatcher
    protocol: aws-lambda
    description: AWS Lambda that receives HTTP Requests from the Gateway and dispatches them to the specific services.
  WorkerLambda:
    host: lambda.eu-central-1.amazonaws.com
    protocol: aws-lambda
    pathname: /2015-03-31/functions/WorkerLambda/invocations
    description: AWS Lambda Worker Function that gets triggerd by the Worker-SQS and receives PaymentCreated events to transfer them to SAP

  EventDispatcher:
    host: lambda.eu-central-1.amazonaws.com
    protocol: aws-lambda
    pathname: /2015-03-31/functions/EventDispatcher/invocations
    description: AWS Lambda Event Dispatcher function that queries the Payments Core database outbox event table and Partner Config database. It is periodically invoked by an Event Bridge Scheduler and it dispatches the outbox events to the Worker-SQS and Webhook-SQS

  WebhookLambda:
    host: lambda.eu-central-1.amazonaws.com
    protocol: aws-lambda
    pathname: /2015-03-31/functions/WebhookLambda/invocations
    description: AWS Lambda Webhook function that is triggered by the Webhook-SQS it signs the messages from the queue and sends them to the partner specific webhook URLs.

  LoggerLambda:
    host: lambda.eu-central-1.amazonaws.com
    protocol: aws-lambda
    pathname: /2015-03-31/functions/LoggerLambda/invocations
    description: AWS Lambda Logger für zentrale Logging-Funktionen
  
  ValidationLambda:
    host: lambda.eu-central-1.amazonaws.com
    protocol: aws-lambda
    pathname: /2015-03-31/functions/ValidationLambda/invocations
    description: AWS Lambda Validator function that tries to ged a validation for partner payment requests from SAP. It is triggered by the POST-SQS and it writes in the Payments Core database payments and outbox events table.

  PaymentsCore:
    host: rds.eu-central-1.amazonaws.com
    protocol: aws-rds
    pathname: /123456789012/payments-core-db
    description: AWS RDS Payments Core Database with 2 tables - payments and outbox events.
    tags:
      - name: database
      - name: payments
      
  PartnerConfig:
    host: rds.eu-central-1.amazonaws.com
    protocol: aws-rds
    pathname: /123456789012/partner-config-db
    description: AWS RDS Partner Configuration Database it stores partner configurations such as mapping rules, webhook URLs, webhook secrets etc.
    tags:
      - name: database
      - name: configuration
  

channels:
  POST-SQS:
    address: POST-SQS
    messages:
      PaymentRequest:
        $ref: '#/components/messages/PaymentRequest'
  
  Worker-SQS:
    address: WORKER-SQS
    messages:
      PaymentCreated:
        $ref: '#/components/messages/PaymentCreated'
  
  Webhook-SQS:
    address: WEBHOOK-SQS
    messages:
      PaymentCreated:
        $ref: '#/components/messages/PaymentCreated'

operations:
  # HTTP Requests → RequestDispatcher → POST-SQS
  httpToRequestDispatcher:
    action: send
    channel:
      $ref: '#/channels/POST-SQS'
    summary: HTTP requests are received by RequestDispatcher and written to POST-SQS
    tags:
      - name: http
      - name: request-dispatcher

  # POST-SQS → ValidationLambda
  postSqsToValidationLambda:
    action: receive
    channel:
      $ref: '#/channels/POST-SQS'
    summary: ValidationLambda processes messages from POST-SQS, validates them, and writes to PaymentsCore DB
    tags:
      - name: validation
      - name: database

  # EventDispatcher reads PaymentsCore Outbox → Worker-SQS & Webhook-SQS
  eventDispatcherToQueues:
    action: send
    channel:
      $ref: '#/channels/Worker-SQS'
    summary: EventDispatcher reads outbox events from PaymentsCore and writes to both Worker-SQS and Webhook-SQS
    tags:
      - name: event-dispatcher
      - name: outbox

  # Worker-SQS → WorkerLambda
  workerSqsToWorkerLambda:
    action: receive
    channel:
      $ref: '#/channels/Worker-SQS'
    summary: WorkerLambda processes messages from Worker-SQS and sends them to SAP
    tags:
      - name: worker
      - name: sap

  # Webhook-SQS → WebhookLambda
  webhookSqsToWebhookLambda:
    action: receive
    channel:
      $ref: '#/channels/Webhook-SQS'
    summary: WebhookLambda processes messages from Webhook-SQS and sends them to partner webhook URLs
    tags:
      - name: webhook
      - name: partner-integration

components:
  messages:
    PaymentRequest:
      name: PaymentRequest
      title: Payment Request
      summary: Initial payment request received via HTTP
      payload:
        type: object
        properties:
          amount:
            type: number
            example: 99.99
          currency:
            type: string
            example: "EUR"
          partnerId:
            type: string
            example: "partner-123"
          reference:
            type: string
            example: "ref-456"
      headers:
        type: object
        properties:
          requestType:
            type: string
            const: PaymentRequest
          version:
            type: string
            default: "1.0"
    PaymentCreated:
      name: PaymentCreated
      title: Payment Created Event
      summary: Wird ausgelöst, wenn eine neue Zahlung erstellt wird
      payload:
        type: object
        properties:
          paymentId:
            type: string
            example: "pay_123456"
          amount:
            type: number
            example: 99.99
          currency:
            type: string
            example: "EUR"
          customerId:
            type: string
            example: "cust_789"
          timestamp:
            type: string
            format: date-time
      headers:
        type: object
        properties:
          eventType:
            type: string
            const: PaymentCreated
          version:
            type: string
            default: "1.0"

    PaymentSettled:
      name: PaymentSettled
      title: Payment Settled Event
      summary: Wird ausgelöst, wenn eine Zahlung abgeschlossen ist
      payload:
        type: object
        properties:
          paymentId:
            type: string
          settlementId:
            type: string
          amount:
            type: number
          fees:
            type: number
      headers:
        type: object
        properties:
          eventType:
            type: string
            const: PaymentSettled
          version:
            type: string
            default: "1.0"

    PaymentFailed:
      name: PaymentFailed
      title: Payment Failed Event
      summary: Wird ausgelöst, wenn eine Zahlung fehlschlägt
      payload:
        type: object
        properties:
          paymentId:
            type: string
          reason:
            type: string
          errorCode:
            type: string
          originalAmount:
            type: number
      headers:
        type: object
        properties:
          eventType:
            type: string
            const: PaymentFailed